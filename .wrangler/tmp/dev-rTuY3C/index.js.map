{
  "version": 3,
  "sources": ["../../../src/index.ts", "file:///C:/Users/palsh/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "file:///C:/Users/palsh/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-CH3QVl/middleware-insertion-facade.js", "file:///C:/Users/palsh/AppData/Roaming/npm/node_modules/wrangler/templates/middleware/common.ts", "../bundle-CH3QVl/middleware-loader.entry.ts"],
  "sourceRoot": "E:\\Projects\\cloudflare-realtime-quiz\\.wrangler\\tmp\\dev-rTuY3C",
  "sourcesContent": ["export interface Env {\n  DB: D1Database;\n  ROOM: DurableObjectNamespace;\n}\n\ntype QuizOption = { id: string; text: string };\ntype QuizQuestion = {\n  id: string;                  // stored as ROOM:qId\n  text: string;\n  correct_option_id?: string;  // stored as ROOM:qId:oId\n  options: QuizOption[];       // option ids are ROOM:qId:oId\n  position?: number;\n};\n\nfunction json(data: any, init: ResponseInit = {}) {\n  return new Response(JSON.stringify(data), {\n    ...init,\n    headers: { \"content-type\": \"application/json\", ...(init.headers || {}) },\n  });\n}\n\nfunction generateCode() {\n  const chars = \"ABCDEFGHJKMNPQRSTUVWXYZ23456789\";\n  let out = \"\";\n  for (let i = 0; i < 5; i++) out += chars[Math.floor(Math.random() * chars.length)];\n  return out;\n}\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    const url = new URL(request.url);\n\n    // Create room with questions\n    if (url.pathname === \"/api/room\" && request.method === \"POST\") {\n      const raw: Array<{ id: string; text: string; correct_option_id?: string; options: { id: string; text: string }[] }> = await request.json();\n      const code = generateCode();\n      await env.DB.prepare(\"INSERT INTO rooms (code, created_at) VALUES (?, ?)\").bind(code, Date.now()).run();\n\n      let pos = 0;\n      for (const q of raw) {\n        const qid = `${code}:${q.id}`;\n        const correctId = q.correct_option_id ? `${qid}:${q.correct_option_id}` : null;\n\n        await env.DB.prepare(\n          \"INSERT INTO questions (id, room_code, text, correct_option_id, position) VALUES (?, ?, ?, ?, ?)\"\n        ).bind(qid, code, q.text, correctId, pos++).run();\n\n        for (const o of q.options || []) {\n          const oid = `${qid}:${o.id}`;\n          await env.DB.prepare(\"INSERT INTO options (id, question_id, text) VALUES (?, ?, ?)\")\n            .bind(oid, qid, o.text)\n            .run();\n        }\n      }\n\n\n      // Warm up durable object\n      const id = env.ROOM.idFromName(code);\n      await env.ROOM.get(id).fetch(\"https://do/bootstrap?code=\" + code);\n\n      return json({ code });\n    }\n\n    // Register player\n    const reg = url.pathname.match(/^\\/api\\/room\\/([A-Z0-9]{5})\\/register$/);\n    if (reg && request.method === \"POST\") {\n      const code = reg[1];\n      const body = (await request.json()) as { name?: string; email?: string; phone?: string };\n      const pid = crypto.randomUUID();\n      await env.DB.prepare(\n        \"INSERT INTO players (id, room_code, name, email, phone, score) VALUES (?, ?, ?, ?, ?, 0)\"\n      )\n        .bind(pid, code, body.name || \"\", body.email || \"\", body.phone || \"\")\n        .run();\n      return json({ id: pid, name: body.name || \"\", email: body.email || \"\", phone: body.phone || \"\" });\n    }\n\n    // Top 5 winners\n    const win = url.pathname.match(/^\\/api\\/room\\/([A-Z0-9]{5})\\/winners$/);\n    if (win && request.method === \"GET\") {\n      const code = win[1];\n      const { results } = await env.DB.prepare(\n        \"SELECT id, name, email, score FROM players WHERE room_code = ? ORDER BY score DESC, id LIMIT 5\"\n      ).bind(code).all();\n      return json(results || []);\n    }\n\n    // Admin Next -> DO decides and broadcasts\n    const next = url.pathname.match(/^\\/api\\/room\\/([A-Z0-9]{5})\\/next$/);\n    if (next && request.method === \"POST\") {\n      const code = next[1];\n      const id = env.ROOM.idFromName(code);\n      return env.ROOM.get(id).fetch(\"https://do/next\", { method: \"POST\" });\n    }\n\n    // WebSocket: route to DO\n    const ws = url.pathname.match(/^\\/ws\\/([A-Z0-9]{5})$/);\n    if (ws && request.headers.get(\"Upgrade\") === \"websocket\") {\n      const code = ws[1];\n      const id = env.ROOM.idFromName(code);\n      return env.ROOM.get(id).fetch(request);\n    }\n\n    // Static assets handled by [assets]\n    return new Response(\"Not found\", { status: 404 });\n  },\n};\n\ntype Client = { ws: WebSocket; playerId?: string; isAdmin?: boolean };\n\nexport class Room {\n  state: DurableObjectState;\n  env: Env;\n\n  code = \"\";\n  clients: Set<Client> = new Set();\n\n  currentIndex = -1;\n  currentQuestionId: string | null = null; // prefixed id\n  currentStartMs = 0;\n  collecting = false;\n\n  constructor(state: DurableObjectState, env: Env) {\n    this.state = state;\n    this.env = env;\n\n    this.state.blockConcurrencyWhile(async () => {\n      const data = await this.state.storage.get<any>(\"room\");\n      if (data) {\n        this.code = data.code;\n        this.currentIndex = data.currentIndex ?? -1;\n        this.currentQuestionId = data.currentQuestionId ?? null;\n        this.currentStartMs = data.currentStartMs ?? 0;\n        this.collecting = !!data.collecting;\n      }\n    });\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    const url = new URL(request.url);\n\n    // Bootstrap (called once per room creation)\n    if (url.pathname === \"/bootstrap\") {\n      this.code = url.searchParams.get(\"code\") || this.code;\n      await this.persist();\n      return new Response(\"ok\");\n    }\n\n    // Admin \"next\" \u2014 start 30s window and broadcast question + deadline\n    if (url.pathname === \"/next\" && request.method === \"POST\") {\n      const q = await this.loadNextQuestion();\n      this.collecting = false;\n\n      if (!q) {\n        this.currentQuestionId = null;\n        this.currentStartMs = 0;\n        await this.persist();\n        this.broadcast({ type: \"question\", question: null });\n        return json(null);\n      }\n\n      this.currentQuestionId = q.id;\n      this.currentStartMs = Date.now();\n      this.collecting = true;\n\n      // Ends exactly at 30s using Durable Object alarm\n      await this.state.storage.setAlarm(new Date(this.currentStartMs + 30_000));\n      await this.persist();\n\n      this.broadcast({ type: \"question\", question: q, deadline: this.currentStartMs + 30_000 });\n      return json(q);\n    }\n\n    // WebSocket\n    if (request.headers.get(\"Upgrade\") === \"websocket\") {\n      const pair = new WebSocketPair();\n      const [client, server] = Object.values(pair) as [WebSocket, WebSocket];\n      this.handleSession(server);\n      return new Response(null, { status: 101, webSocket: client });\n    }\n\n    return new Response(\"Not found\", { status: 404 });\n  }\n\n  handleSession(ws: WebSocket) {\n    const client: Client = { ws };\n    ws.accept();\n    this.clients.add(client);\n\n    ws.addEventListener(\"message\", async (ev) => {\n      try {\n        const data = JSON.parse(ev.data as string);\n        if (data.type === \"register\") {\n          client.playerId = data.playerId; // undefined for admin/player until client sets it\n          client.isAdmin = !!data.isAdmin;\n          ws.send(JSON.stringify({ type: \"registered\", ok: true }));\n        } else if (data.type === \"answer\") {\n          if (!this.collecting || !this.currentQuestionId) {\n            ws.send(JSON.stringify({ type: \"status\", message: \"Answer window closed.\" }));\n            return;\n          }\n          // Ensure one answer per player per question \u2014 enforced by unique index too\n          const already = await this.hasAnswered(this.currentQuestionId, data.playerId);\n          if (already) {\n            ws.send(JSON.stringify({ type: \"status\", message: \"Already answered.\" }));\n            return;\n          }\n          await this.storeAnswer(this.currentQuestionId, data.playerId, data.optionId);\n          ws.send(JSON.stringify({ type: \"accepted\", at: Date.now() }));\n        }\n      } catch (e: any) {\n        try { ws.send(JSON.stringify({ type: \"error\", message: String(e?.message || e) })); } catch {}\n      }\n    });\n\n    ws.addEventListener(\"close\", () => this.clients.delete(client));\n  }\n\n  broadcast(msg: any) {\n    const payload = JSON.stringify(msg);\n    for (const c of this.clients) {\n      try { c.ws.send(payload); } catch {}\n    }\n  }\n\n  async persist() {\n    await this.state.storage.put(\"room\", {\n      code: this.code,\n      currentIndex: this.currentIndex,\n      currentQuestionId: this.currentQuestionId,\n      currentStartMs: this.currentStartMs,\n      collecting: this.collecting,\n    });\n  }\n\n  async loadNextQuestion(): Promise<QuizQuestion | null> {\n    const { results } = await this.env.DB.prepare(\n      \"SELECT q.id, q.text, q.correct_option_id FROM questions q WHERE q.room_code = ? ORDER BY position ASC\"\n    ).bind(this.code).all();\n\n    this.currentIndex += 1;\n    if (!results || this.currentIndex >= results.length) {\n      return null;\n    }\n\n    const row = results[this.currentIndex] as any;\n    const opts = await this.env.DB.prepare(\"SELECT id, text FROM options WHERE question_id = ?\")\n      .bind(row.id)\n      .all();\n\n    return {\n      id: row.id,\n      text: row.text,\n      correct_option_id: row.correct_option_id,\n      options: (opts.results as any[]) || [],\n      position: this.currentIndex,\n    };\n  }\n\n  async hasAnswered(qid: string, playerId: string): Promise<boolean> {\n    const { results } = await this.env.DB.prepare(\n      \"SELECT id FROM answers WHERE room_code = ? AND question_id = ? AND player_id = ? LIMIT 1\"\n    ).bind(this.code, qid, playerId).all();\n    return !!(results && results.length);\n  }\n\n  async storeAnswer(qid: string, playerId: string, optionId: string) {\n    const aid = crypto.randomUUID();\n    await this.env.DB.prepare(\n      \"INSERT INTO answers (id, room_code, question_id, player_id, option_id, first_flag, created_at) \" +\n      \"VALUES (?, ?, ?, ?, ?, ?, ?)\"\n    ).bind(aid, this.code, qid, playerId, optionId, 0, Date.now()).run();\n  }\n\n  // 30-second window ends here\n  async alarm() {\n    if (!this.collecting || !this.currentQuestionId) return;\n\n    this.collecting = false;\n    const qid = this.currentQuestionId;\n\n    // Load correct option\n    const qRow = await this.env.DB.prepare(\n      \"SELECT correct_option_id FROM questions WHERE id = ? AND room_code = ?\"\n    ).bind(qid, this.code).first<any>();\n    const correctId = qRow?.correct_option_id ?? null;\n\n    // Fetch all answers with player info\n    const ans = await this.env.DB.prepare(\n      \"SELECT a.player_id, a.option_id, a.created_at, p.name, p.email \" +\n      \"FROM answers a JOIN players p ON a.player_id = p.id \" +\n      \"WHERE a.room_code = ? AND a.question_id = ?\"\n    ).bind(this.code, qid).all<any>();\n\n    const start = this.currentStartMs;\n    const correct = (ans.results || []).filter((r: any) => r.option_id === correctId);\n\n    // Sort fastest first\n    correct.sort((x: any, y: any) => (x.created_at - start) - (y.created_at - start));\n\n    // +1 point to all correct\n    if (correct.length) {\n      const ids = [...new Set(correct.map((r: any) => r.player_id))];\n      for (const pid of ids) {\n        await this.env.DB.prepare(\"UPDATE players SET score = score + 1 WHERE id = ?\").bind(pid).run();\n      }\n    }\n\n    // Leaderboard for this question (compact)\n    const leaderboard = correct.map((r: any, i: number) => ({\n      rank: i + 1,\n      name: r.name || \"Player\",\n      email: r.email || \"\",\n      ms: r.created_at - start,\n    }));\n\n    // Broadcast result\n    this.broadcast({\n      type: \"result\",\n      questionId: qid,\n      correct_option_id: correctId,\n      leaderboard,\n    });\n\n    await this.persist();\n  }\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"E:\\\\Projects\\\\cloudflare-realtime-quiz\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\palsh\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\palsh\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"E:\\\\Projects\\\\cloudflare-realtime-quiz\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"E:\\\\Projects\\\\cloudflare-realtime-quiz\\\\.wrangler\\\\tmp\\\\bundle-CH3QVl\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\palsh\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"E:\\\\Projects\\\\cloudflare-realtime-quiz\\\\.wrangler\\\\tmp\\\\bundle-CH3QVl\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"E:\\\\Projects\\\\cloudflare-realtime-quiz\\\\.wrangler\\\\tmp\\\\bundle-CH3QVl\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
